/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./js/script.js":
/*!**********************!*\
  !*** ./js/script.js ***!
  \**********************/
/***/ (() => {

eval("const modal = document.querySelector(\".modal\");\r\nconst configs = document.querySelector(\".configs\");\r\nconst containerTasks = document.querySelector(\".add-list-tasks\");\r\nconst menu = document.querySelector(\".menu\");\r\nconst arrowClose = document.querySelector(\"[data-img-close='tasks']\");\r\nconst modalLinks = document.querySelectorAll(\r\n  \"[data-modal], [data-config], [data-menu='button']\"\r\n);\r\nconst divAddTasks = document.querySelector(\".tasks\");\r\nconst imgClose = document.querySelectorAll(\"[data-img-close]\");\r\nconst closeModals = [modal, configs, menu];\r\nconst active = \"active\";\r\nconst documentBody = document.body;\r\n\r\nconst matchMedia = (media) => {\r\n  const small = window.matchMedia(media);\r\n  return small;\r\n}\r\n\r\nfunction initModals() {\r\n  function openModal(e) {\r\n    if (e) e.preventDefault();\r\n    e.stopPropagation();\r\n\r\n    const target = e.target;\r\n\r\n    if (target.hasAttribute(\"data-modal\")) {\r\n      modal.classList.add(active);\r\n    }\r\n\r\n    if (target.hasAttribute(\"data-config\")) {\r\n      configs.classList.add(active);\r\n      const small = matchMedia(\"(max-width: 1440px)\");      \r\n      configs.style.overflowY = small.matches ? \"scroll\" : \"hidden\";\r\n    }\r\n    \r\n    if (target.closest(\"[data-menu]\")) {\r\n      menu.classList.toggle(active);\r\n      modalLinks[2].classList.toggle(\"scale-effect\");\r\n    }\r\n  }\r\n\r\n  function closeModal(e) {\r\n    const target = e.target;\r\n    closeModals.forEach((modal, index) => {\r\n      if (target === modal && index < 2) modal.classList.remove(active);\r\n\r\n      if (index === 2 && !modal.contains(target)) {\r\n        modal.classList.remove(active);\r\n        modalLinks[2].classList.remove(\"scale-effect\");\r\n      }\r\n    });\r\n  }\r\n\r\n  function imgCloseModalAndConfigs(event) {\r\n    const type = event.target.dataset.imgClose;\r\n    if (type === \"modal\") {\r\n      modal.classList.remove(active);\r\n    } else if (type === \"configs\") {\r\n      configs.classList.remove(active);\r\n    } else {\r\n      containerTasks.classList.remove(active);\r\n      arrowClose.classList.toggle(active);\r\n    }\r\n  }\r\n\r\n  modalLinks.forEach((el) => el.addEventListener(\"click\", openModal));\r\n  document.addEventListener(\"click\", closeModal);\r\n  imgClose.forEach((el) =>\r\n    el.addEventListener(\"click\", imgCloseModalAndConfigs)\r\n  );\r\n}\r\ninitModals();\r\n\r\n// function starTyping() {\r\n//   const paragraphMessage = document.querySelector(\".message\");\r\n//   const frases = [\r\n//     \"Bem-vindo(a) ao PomoClock.\",\r\n//     \"Configure o timer, dê start, concentre-se e trabalhe.\",\r\n//     \"Foco e atenção.\",\r\n//   ];\r\n//   let index = 0;\r\n\r\n//   function initPhrase(frases, callback) {\r\n//     let acumulada = \"\";\r\n//     for (let i = 0; i < frases.length; i++) {\r\n//       setTimeout(() => {\r\n//         acumulada += frases[i];\r\n//         paragraphMessage.textContent = acumulada;\r\n\r\n//         if (i === frases.length - 1 && callback) {\r\n//           setTimeout(callback, 500);\r\n//         }\r\n//       }, i * 50);\r\n//     }\r\n//   }\r\n\r\n//   function executarFrases(index) {\r\n//     if (index >= frases.length) return;\r\n\r\n//     initPhrase(frases[index], () => {\r\n//       setTimeout(() => {\r\n//         paragraphMessage.textContent = \"\";\r\n//         if (index === frases.length - 1) {\r\n//           tasks.classList.add(\"active\");\r\n//         } else {\r\n//           executarFrases(index + 1);\r\n//         }\r\n//       }, 1000);\r\n//     });\r\n//   }\r\n//   executarFrases(0)\r\n// }\r\n// starTyping();\r\n\r\nfunction initAddTasks() {\r\n  const arrowClose = document.querySelector(\"[data-img-close='tasks']\");\r\n\r\n  function addTasks() {\r\n    containerTasks.classList.toggle(\"active\");\r\n    arrowClose.classList.toggle(\"active\");\r\n  }\r\n\r\n  divAddTasks.addEventListener(\"click\", addTasks);\r\n}\r\ninitAddTasks();\r\n\r\nfunction initPomodoros() {\r\n  const pomodoros = document.querySelectorAll(\r\n    \".div-clocks [data-type='pomodoro']\"\r\n  );\r\n  const dataTimer = document.querySelector(\"[data-timer]\");\r\n  const documentBody = document.body;\r\n\r\n  if (pomodoros.length) pomodoros[0].classList.add(\"active\");\r\n\r\n  function choosePomodoro(e) {\r\n    pomodoros.forEach((el) => el.classList.remove(\"active\"));\r\n    e.target.classList.add(\"active\");\r\n\r\n    if (e.target.classList.contains(\"pomodoro-clock\")) {\r\n      dataTimer.innerText = \"25:00\";\r\n      documentBody.style.backgroundColor = \"var(--tomato)\";\r\n    }\r\n\r\n    if (e.target.classList.contains(\"short-pause-pomodoro\")) {\r\n      dataTimer.innerText = \"05:00\";\r\n      documentBody.style.backgroundColor = \"var(--backgroundShortBreak)\";\r\n    }\r\n\r\n    if (e.target.classList.contains(\"long-pause-pomodoro\")) {\r\n      dataTimer.innerText = \"15:00\";\r\n      documentBody.style.backgroundColor = \"var(--backgroundLongBreak)\";\r\n    }\r\n  }\r\n  pomodoros.forEach((el) => el.addEventListener(\"click\", choosePomodoro));\r\n}\r\ninitPomodoros();\r\n\r\nlet tasks = [];\r\n\r\ntry {\r\n  const stored = JSON.parse(localStorage.getItem(\"tasksData\")) || [];\r\n  if (Array.isArray(stored)) tasks = stored;\r\n} catch (e) {\r\n  console.error(\"Erro ao ler taskData\", e);\r\n}\r\n\r\nfunction initTasks() {\r\n  const inputDescriptionTask = document.getElementById(\"task\");\r\n  const textArea = document.querySelector(\"textarea\");\r\n  const addNotes = document.querySelector(\"[data-notes]\");\r\n  const buttonAddTasks = document.querySelector(\"[data-add-tasks]\");\r\n  const divInputTasks = document.querySelector(\".inputTasks\");\r\n\r\n  function addTextArea() {\r\n    textArea.classList.toggle(\"active\");\r\n  }\r\n\r\n  function renderTasks(elementTasks = tasks) {\r\n    divInputTasks.innerHTML = \"\";\r\n    elementTasks.forEach((task, index) => {\r\n      const taskElement = createTaskElement(\r\n        task.title,\r\n        task.note,\r\n        index,\r\n        task.done\r\n      );\r\n      divInputTasks.appendChild(taskElement);\r\n    });\r\n    addCounter();\r\n  }\r\n\r\n  function addTasksAndNotes() {\r\n    const title = inputDescriptionTask.value.trim();\r\n    const note = textArea.value.trim();\r\n\r\n    if (!title) return;\r\n\r\n    const newTask = {\r\n      title,\r\n      note,\r\n      done: false,\r\n    };\r\n\r\n    tasks.push(newTask);\r\n\r\n    localStorage.setItem(\"tasksData\", JSON.stringify(tasks));\r\n    renderTasks();\r\n\r\n    inputDescriptionTask.value = \"\";\r\n    textArea.value = \"\";\r\n  }\r\n\r\n  function createTaskElement(title, note, index) {\r\n    const span = createElementSpan();\r\n    const para = createElementParagraph(title);\r\n    const div = createElementDiv(note);\r\n    const btnEditSave = createElementEditAndSave();\r\n    const wrapper = createElementWrapper();\r\n    const checkbox = createElementCheckBox(index, para);\r\n    addDropDownEvent(btnEditSave, index, para, div, span, wrapper);\r\n    wrapper.append(checkbox, para, btnEditSave);\r\n    span.append(wrapper);\r\n    if (note) span.appendChild(div);\r\n\r\n    return span;\r\n  }\r\n\r\n  function addDropDownEvent(btnDropDown, index, para, div, span, wrapper) {\r\n    document.addEventListener(\"click\", (e) => {\r\n      const divDropDown = document.querySelector(\".activedDivDropDown\");\r\n      const target = e.target;\r\n\r\n      if (!divDropDown) return;\r\n\r\n      if (divDropDown && !divDropDown.contains(target)) {\r\n        removeElementsUI(divDropDown);\r\n        removeScaleEffectAllElements();\r\n      }\r\n    });\r\n\r\n    btnDropDown.addEventListener(\"click\", (e) => {\r\n      const divDropDown = document.querySelector(\".activedDivDropDown\");\r\n      e.stopPropagation();\r\n      btnDropDown.classList.toggle(\"scale-effect\");\r\n\r\n      if (divDropDown) {\r\n        removeElementsUI(divDropDown);\r\n        return;\r\n      } else {\r\n        const newDivDropDown = document.createElement(\"div\");\r\n        newDivDropDown.classList.add(\"activedDivDropDown\");\r\n\r\n        const rect = btnDropDown.getBoundingClientRect();\r\n\r\n        newDivDropDown.style.position = \"absolute\";\r\n        newDivDropDown.style.top = `${rect.bottom + window.scrollY}px`;\r\n\r\n        const [edit, divEdit, save] = createElementEdit(\r\n          index,\r\n          para,\r\n          div,\r\n          btnDropDown,\r\n          newDivDropDown,\r\n          span,\r\n          wrapper\r\n        );\r\n        const [remove, divRemove] = createElementRemove(index, newDivDropDown);\r\n        newDivDropDown.append(divEdit, divRemove);\r\n        document.body.appendChild(newDivDropDown);\r\n      }\r\n    });\r\n  }\r\n\r\n  function createElementEdit(\r\n    index,\r\n    para,\r\n    div,\r\n    btnDropDown,\r\n    divDropDown,\r\n    span,\r\n    wrapper\r\n  ) {\r\n    const edit = document.createElement(\"span\");\r\n    edit.classList.add(\"edit\");\r\n    edit.innerText = \"Editar\";\r\n\r\n    const divEdit = document.createElement(\"div\");\r\n    divEdit.classList.add(\"divListEdit\");\r\n\r\n    const save = document.createElement(\"button\");\r\n    save.type = \"button\";\r\n    save.classList.add(\"activatedButtonSave\");\r\n    save.innerText = \"Salvar\";\r\n\r\n    divEdit.appendChild(edit);\r\n\r\n    divEdit.addEventListener(\"click\", () => {\r\n      const inputEditTask = document.createElement(\"input\");\r\n      inputEditTask.type = \"text\";\r\n      inputEditTask.classList.add(\"activatedInputTasks\");\r\n      inputEditTask.value = tasks[index].title;\r\n\r\n      const inputEditNote = document.createElement(\"input\");\r\n      inputEditNote.type = \"text\";\r\n      inputEditNote.classList.add(\"activatedInputNote\");\r\n      inputEditNote.value = tasks[index].note;\r\n\r\n      para.replaceWith(inputEditTask);\r\n      div.replaceWith(inputEditNote);\r\n      wrapper.insertAdjacentElement(\"beforeend\", save);\r\n\r\n      removeElementsUI(divDropDown, btnDropDown);\r\n\r\n      save.addEventListener(\"click\", () => {\r\n        tasks[index].title = inputEditTask.value;\r\n        tasks[index].note = inputEditNote.value;\r\n\r\n        if (!tasks[index].title) return;\r\n\r\n        localStorage.setItem(\"tasksData\", JSON.stringify(tasks));\r\n        const updateTaskElements = createTaskElement(\r\n          tasks[index].title,\r\n          tasks[index].note,\r\n          index\r\n        );\r\n        span.replaceWith(updateTaskElements);\r\n        renderTasks();\r\n      });\r\n    });\r\n\r\n    return [edit, divEdit, save];\r\n  }\r\n\r\n  function removeElementsUI(dropDown, button) {\r\n    dropDown?.remove();\r\n    button?.remove();\r\n  }\r\n\r\n  function createElementRemove(index, newDivDropDown) {\r\n    const remove = document.createElement(\"span\");\r\n    remove.classList.add(\"remove\");\r\n    remove.innerText = \"Remover\";\r\n\r\n    const divRemove = document.createElement(\"div\");\r\n    divRemove.classList.add(\"divListRemove\");\r\n\r\n    divRemove.appendChild(remove);\r\n\r\n    divRemove.addEventListener(\"click\", () => {\r\n      tasks.splice(index, 1);\r\n      removeElementsUI(newDivDropDown);\r\n      localStorage.setItem(\"tasksData\", JSON.stringify(tasks));\r\n      renderTasks();\r\n      addCounter();\r\n    });\r\n\r\n    return [remove, divRemove];\r\n  }\r\n\r\n  function addCounter() {\r\n    const count = document.querySelector(\"[data-count]\");\r\n    count.innerText = tasks.length;\r\n  }\r\n\r\n  function createElementCheckBox(index, para) {\r\n    const checkbox = document.createElement(\"div\");\r\n    checkbox.classList.add(\"activatedDivCheckBox\");\r\n    checkbox.setAttribute(\"role\", \"checkbox\");\r\n    checkbox.setAttribute(\"aria-checked\", tasks[index]?.done);\r\n\r\n    if (tasks[index]?.done) {\r\n      checkbox.setAttribute(\r\n        \"aria-checked\",\r\n        checkbox.classList.add(\"alternateStateCheckbox\")\r\n      );\r\n      para.classList.add(\"alternateStateParagraph\");\r\n    }\r\n\r\n    checkbox.addEventListener(\"click\", () => {\r\n      checkbox.classList.toggle(\"alternateStateCheckbox\");\r\n      para.classList.toggle(\"alternateStateParagraph\");\r\n\r\n      tasks[index].done = checkbox.classList.contains(\"alternateStateCheckbox\");\r\n      allTasksCompleted();\r\n      reOrder();\r\n      localStorage.setItem(\"tasksData\", JSON.stringify(tasks));\r\n    });\r\n\r\n    return checkbox;\r\n  }\r\n\r\n  function reOrder() {\r\n    const reorder = [...tasks].sort((a, b) => a.done - b.done);\r\n\r\n    tasks.length = 0;\r\n    tasks.push(...reorder);\r\n    localStorage.setItem(\"tasksData\", JSON.stringify(tasks));\r\n\r\n    renderTasks();\r\n  }\r\n\r\n  function removeAllCompletedTasks() {\r\n    const removeCompletedTasks = document.querySelector(\r\n      \".menu [data-completed]\"\r\n    );\r\n\r\n    removeCompletedTasks.addEventListener(\"click\", () => {\r\n      const taskCompleted = tasks.filter((el) => !el.done);\r\n      localStorage.setItem(\"tasksData\", JSON.stringify(taskCompleted));\r\n\r\n      tasks.length = 0;\r\n      tasks.push(...taskCompleted);\r\n\r\n      removeMenuUI(menu);\r\n      removeScaleEffectAllElements();\r\n      renderTasks();\r\n    });\r\n  }\r\n\r\n  function handleRemoveAllTasks() {\r\n    const removeAllTasks = document.querySelector(\".menu [data-remove-all]\");\r\n\r\n    removeAllTasks.addEventListener(\"click\", () => {\r\n      tasks.length = 0;\r\n      localStorage.setItem(\"tasksData\", JSON.stringify(tasks));\r\n\r\n      removeMenuUI(menu);\r\n      removeScaleEffectAllElements();\r\n      renderTasks();\r\n    });\r\n  }\r\n\r\n  function removeAllTasks() {\r\n    tasks.length = 0;\r\n    localStorage.setItem(\"tasksData\", JSON.stringify([]));\r\n    renderTasks();\r\n  }\r\n\r\n  function allTasksCompleted() {\r\n    const completedTask = tasks.every((el) => el.done);\r\n    if (tasks.length > 0 && completedTask) {\r\n      setTimeout(() => {\r\n        alert(\"Parabéns, você concluiu todas as tarefas!\");\r\n        removeAllTasks();\r\n      }, 500);\r\n    }\r\n  }\r\n\r\n  function removeScaleEffectAllElements() {\r\n    document.querySelectorAll(\".scale-effect\").forEach((btn) => {\r\n      btn.classList.remove(\"scale-effect\");\r\n    });\r\n  }\r\n\r\n  function removeMenuUI(menu) {\r\n    const isVisible = menu.classList.contains(\"active\");\r\n\r\n    menu.classList.toggle(\"active\", !isVisible);\r\n    menu.classList.toggle(\"removeMenu\", isVisible);\r\n  }\r\n\r\n  function createElementWrapper() {\r\n    const elementWrapper = document.createElement(\"div\");\r\n    elementWrapper.classList.add(\"wrapper\");\r\n\r\n    return elementWrapper;\r\n  }\r\n\r\n  function createElementSpan() {\r\n    const spanElement = document.createElement(\"span\");\r\n    spanElement.classList.add(\"activatedSpan\");\r\n\r\n    return spanElement;\r\n  }\r\n\r\n  function createElementParagraph(text) {\r\n    const paragraphElement = document.createElement(\"p\");\r\n    paragraphElement.classList.add(\"activatedParagraph\");\r\n    paragraphElement.innerText = text;\r\n\r\n    return paragraphElement;\r\n  }\r\n\r\n  function createElementDiv(text) {\r\n    const divElement = document.createElement(\"div\");\r\n    divElement.classList.add(\"activatedDiv\");\r\n    divElement.innerText = text;\r\n\r\n    return divElement;\r\n  }\r\n\r\n  function createElementEditAndSave() {\r\n    const btnEditSave = document.createElement(\"button\");\r\n    btnEditSave.type = \"button\";\r\n    btnEditSave.classList.add(\"activatedEditAndSave\");\r\n    const imgDropDown = document.createElement(\"img\");\r\n    imgDropDown.src = \"./images/three-points.svg\";\r\n    imgDropDown.style.marginTop = \"2px\";\r\n    btnEditSave.appendChild(imgDropDown);\r\n\r\n    return btnEditSave;\r\n  }\r\n\r\n  addNotes.addEventListener(\"click\", addTextArea);\r\n  buttonAddTasks.addEventListener(\"click\", addTasksAndNotes);\r\n  removeAllCompletedTasks();\r\n  handleRemoveAllTasks();\r\n  renderTasks();\r\n}\r\ninitTasks();\r\n\n\n//# sourceURL=webpack://projeto-pomodoro/./js/script.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./js/script.js"]();
/******/ 	
/******/ })()
;